Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
+++ b/.gitignore	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
@@ -0,0 +1,2 @@
+# Project exclude paths
+/cmake-build-debug-wsl/
\ No newline at end of file
Index: CMakeLists.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
--- /dev/null	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
+++ b/CMakeLists.txt	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
@@ -0,0 +1,6 @@
+cmake_minimum_required(VERSION 3.16)
+project(MLCPP)
+
+set(CMAKE_CXX_STANDARD 14)
+
+add_executable(NN main.cpp Vector.h Matrix.h LiniarAlgebra.cpp LiniarAlgebra.h ML.cpp ML.h)
Index: LiniarAlgebra.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LiniarAlgebra.cpp b/LiniarAlgebra.cpp
new file mode 100644
--- /dev/null	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
+++ b/LiniarAlgebra.cpp	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
@@ -0,0 +1,126 @@
+//
+// Created by Tomer on 12/08/2022.
+//
+
+#include <random>
+#include <iostream>
+#include "LiniarAlgebra.h"
+
+
+using namespace std;
+
+struct data_point {
+    Vector *x;
+    int y;
+
+    data_point(Vector *v, int r) {
+        x = v;
+        y = r;
+    }
+
+    data_point(data_point *d) {
+        x = new Vector(d->x);
+        y = d->y;
+    }
+};
+
+vector<data_point *> *shuffleData(const vector<data_point *> *v) {
+    auto *shuffled = new vector<data_point *>;
+    for (auto i : *v) {
+        auto d = new data_point(i);
+        shuffled->push_back(d);
+    }
+    shuffle(shuffled->begin(), shuffled->end(), random_device());
+    return shuffled;
+}
+
+Matrix *multi(const Vector *a, const Vector *b) {
+    if (a->getSize() != b->getSize() || a->isTrans() == b->isTrans()) {
+        return nullptr;
+    }
+    const unsigned int size = a->getSize();
+    if (a->isTrans()) {
+        //matrix 1X1
+        double sum = 0;
+        for (int i = 0; i < size; i++) {
+            sum += (*a)[i] * (*b)[i];
+        }
+        double **data = new double *[1];
+        data[0] = new double[1]{sum};
+        return new Matrix(1, 1, data);
+    } else {
+        //matrix size X size
+        Vector **tempData = new Vector *[size];
+        for (int i = 0; i < size; i++) {
+            double *data = new double[size];
+            double c = (*b)[i];
+            for (int j = 0; j < size; j++) {
+                double r = (*a)[j];
+                data[j] = r * c;
+            }
+            tempData[i] = new Vector(size, data);
+        }
+        return new Matrix(size, size, tempData);
+    }
+}
+
+Vector *multi(const Vector *a, const Matrix *b) {
+    if (b->getRows() != a->getSize() || !a->isTrans()) {
+        return nullptr;
+    }
+    const unsigned int size = b->getCols();
+    double *data = new double[size];
+    for (int i = 0; i < size; i++) {
+        Vector *col = (*b)[i];
+        double sum = 0;
+        for (int j = 0; j < a->getSize(); j++) {
+            double r = (*a)[j];
+            double c = (*col)[j];
+            sum += r * c;
+        }
+        data[i] = sum;
+    }
+    return new Vector(size, data, true);
+}
+
+double dot(const Vector *a, const Vector *b) {
+    if (a->getSize() != b->getSize()) {
+        return -1;
+    }
+    double sum = 0;
+    const unsigned int size = a->getSize();
+    for (int i = 0; i < size; i++) {
+
+        double aI = (*a)[i];
+        double bI = (*b)[i];
+        sum += aI * bI;
+
+    }
+    return sum;
+}
+
+Vector *dot(const Matrix *a, const Vector *b) {
+    if (a->getRows() != b->getSize()) {
+        return nullptr;
+    }
+    const int size =a->getCols();
+    double *tempData = new double[size];
+    for (int i = 0; i < size; i++) {
+        auto col = (*a)[i];
+        tempData[i] = dot(col, b);
+    }
+    return new Vector(size,tempData);
+}
+
+int argMax(const Vector *v) {
+    double max = (*v)[0];
+    int index = 0;
+    for (int i = 1; i < v->getSize(); i++) {
+        double temp = (*v)[i];
+        if (temp > max) {
+            max = temp;
+            index = i;
+        }
+    }
+    return index;
+}
Index: LiniarAlgebra.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/LiniarAlgebra.h b/LiniarAlgebra.h
new file mode 100644
--- /dev/null	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
+++ b/LiniarAlgebra.h	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
@@ -0,0 +1,23 @@
+//
+// Created by Tomer on 12/08/2022.
+//
+
+#ifndef NN_LINIARALGEBRA_H
+#define NN_LINIARALGEBRA_H
+#include "Vector.h"
+#include "Matrix.h"
+#include "vector"
+#include <algorithm>
+
+#include "Matrix.h"
+#include "Vector.h"
+class data_point;
+using namespace std;
+
+Matrix *multi(const Vector *a, const Vector *b);
+Vector *multi(const Vector *a, const Matrix *b);
+double dot(const Vector *a, const Vector *b);
+Vector *dot(const Matrix *a, const Vector *b);
+vector<data_point *> *shuffleData(const vector<data_point *> *v);
+int argMax(const Vector *v);
+#endif //NN_LINIARALGEBRA_H
Index: ML.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ML.cpp b/ML.cpp
new file mode 100644
--- /dev/null	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
+++ b/ML.cpp	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
@@ -0,0 +1,55 @@
+//
+// Created by Tomer on 13/08/2022.
+//
+
+#include <iostream>
+#include "ML.h"
+
+struct data_point {
+    Vector *x;
+    int y;
+
+    data_point(Vector *v, int r) {
+        x = v;
+        y = r;
+    }
+
+    data_point(data_point *d) {
+        x = new Vector(d->x);
+        y = d->y;
+    }
+};
+
+int MAX_EPOCH = 300;
+
+void Perceptron::train(vector<data_point *> *data) {
+    for (int i = 0; i < MAX_EPOCH; i++) {
+        vector<data_point *> *points = shuffleData(data);
+        for (auto p:*points) {
+            Vector *d = dot(this->w, p->x);
+            Vector *f = *d + this->bias;
+            int result = argMax(f);
+            if (result != p->y) {
+                auto diff = *(p->x) * this->theta;
+                //strength real answer
+                this->w=this->w->updatePlus(p->y, diff);
+                this->bias=this->bias->updatePlus(p->y, this->theta);
+                //subdue false result
+                this->w=this->w->updatePlus(result, *diff * -1);
+                this->bias=this->bias->updatePlus(result, -this->theta);
+
+            }
+        }
+    }
+}
+
+double Perceptron::test(vector<data_point *> *data) {
+    double success = 0;
+    for (auto p:*data) {
+        Vector *d = dot(this->w, p->x);
+        Vector *f = *d + this->bias;
+        int result = argMax(f);
+        success += (result == p->y)?1 : 0;
+    }
+    return success/data->size();
+}
Index: ML.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ML.h b/ML.h
new file mode 100644
--- /dev/null	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
+++ b/ML.h	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
@@ -0,0 +1,36 @@
+//
+// Created by Tomer on 13/08/2022.
+//
+
+#ifndef MLCPP_ML_H
+#define MLCPP_ML_H
+
+#include "Vector.h"
+#include "vector"
+#include "LiniarAlgebra.h"
+using namespace std;
+
+class data_point;
+
+class Perceptron {
+public:
+    double theta;
+    int changing_rate;
+    double multi;
+    Vector *bias;
+    Matrix* w;
+
+    Perceptron(int classes,int size) {
+        this->theta = 0.1;
+        this->changing_rate = 50;
+        this->multi = 0.5;
+        this->bias = new Vector(classes);
+        this->w=new Matrix(size,classes);
+    };
+
+    void train(vector<data_point *> *data);
+
+    double test(vector<data_point *> *data);
+};
+
+#endif //MLCPP_ML_H
Index: Matrix.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Matrix.h b/Matrix.h
new file mode 100644
--- /dev/null	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
+++ b/Matrix.h	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
@@ -0,0 +1,217 @@
+//
+// Created by Tomer on 11/08/2022.
+//
+
+#ifndef NN_MATRIX_H
+#define NN_MATRIX_H
+
+#include <ostream>
+#include "Vector.h"
+
+
+class Vector;
+
+class Matrix {
+
+
+    unsigned int rows;
+    unsigned int cols;
+    Vector **data;
+
+public:
+    Matrix() {
+        this->rows = 0;
+        this->cols = 0;
+        this->data = nullptr;
+    }
+
+    Matrix(const Matrix *pMatrix) {
+        this->rows = pMatrix->rows;
+        this->cols = pMatrix->cols;
+        this->data = new Vector *[this->cols];
+        for (int i = 0; i < this->cols; i++) {
+            this->data[i] = (*pMatrix)[i];
+        }
+    }
+
+    Matrix(unsigned int rows, unsigned int cols) {
+        this->rows = rows;
+        this->cols = cols;
+        this->data = new Vector *[cols];
+        for (int i = 0; i < cols; i++) {
+            this->data[i] = new Vector(rows);
+        }
+    }
+
+    Matrix(unsigned int rows, unsigned int cols, Vector **data) {
+        this->rows = rows;
+        this->cols = cols;
+        this->data = new Vector *[cols];
+        for (int i = 0; i < 3; i++) {
+            this->data[i] = new Vector(data[i]);
+        }
+    }
+
+    Matrix(unsigned int rows, unsigned int cols, double **data) {
+        this->rows = rows;
+        this->cols = cols;
+        this->data = new Vector *[cols];
+        for (int i = 0; i < cols; i++) {
+            this->data[i] = new Vector(rows, data[i]);
+        }
+    }
+
+    Matrix *operator+(double alpha) const {
+        Vector **tempData = new Vector *[this->cols];
+        for (int i = 0; i < this->cols; i++) {
+            auto t = new Vector(this->data[i]);
+            tempData[i] = *t + alpha;
+        }
+        return new Matrix(this->rows, this->cols, tempData);
+    }
+
+    Matrix *operator+=(double alpha) {
+        Vector **tempData = new Vector *[this->cols];
+        for (int i = 0; i < this->cols; i++) {
+            auto t = new Vector(this->data[i]);
+            tempData[i] = *t + alpha;
+        }
+        delete this->data;
+        this->data = tempData;
+        return this;
+    }
+
+    Matrix *operator*=(double alpha) {
+        Vector **tempData = new Vector *[this->cols];
+        for (int i = 0; i < this->cols; i++) {
+            auto t = new Vector(this->data[i]);
+            tempData[i] = *t * alpha;
+        }
+        delete this->data;
+        this->data = tempData;
+        return this;
+    }
+
+    Matrix *operator*(double alpha) const {
+        Vector **tempData = new Vector *[this->cols];
+        for (int i = 0; i < this->cols; i++) {
+            auto t = new Vector(*this->data[i]);
+            tempData[i] = *t * alpha;
+        }
+        return new Matrix(this->rows, this->cols, tempData);
+    }
+
+    Matrix *operator+(Matrix *b) const {
+        if (b->rows != this->rows || b->cols != this->cols) {
+            return nullptr;
+        }
+        auto tempData = new Vector *[this->cols];
+        for (int i = 0; i < this->cols; i++) {
+            auto aV = new Vector(this->data[i]);
+            auto bV = new Vector(b->data[i]);
+            tempData[i] = *aV + bV;
+        }
+        return new Matrix(this->rows, this->cols, tempData);
+    }
+
+    Matrix *operator*(const Matrix *b) const {
+        if (this->cols != b->rows) {
+            return nullptr;
+        }
+        Vector **tempData = new Vector *[b->cols];
+        //for every new column of b
+        for (int i = 0; i < b->cols; i++) {
+            Vector *col = new Vector((*b)[i]);
+            //for every new row of a (this)
+            auto *tempIntData = new double[this->rows];
+            for (int j = 0; j < this->rows; j++) {
+                auto *row = new double[this->cols];
+                for (auto temp = 0; temp < this->cols; temp++) {
+                    row[temp] = (*this->data[temp])[j];
+                }
+                double temp = 0;
+                //calculate inside
+                for (int k = 0; k < this->cols; k++) {
+                    double aI = row[k];
+                    double bI = (*col)[k];
+                    temp += aI * bI;
+                }
+                tempIntData[j] = temp;
+            }
+            tempData[i] = new Vector(this->rows, tempIntData);
+        }
+        return new Matrix(this->rows, b->cols, tempData);
+
+    }
+
+    Vector *operator*(const Vector *b) const {
+        if (this->cols != b->getSize() && !b->isTrans()) {
+            return nullptr;
+        }
+        auto *pDouble = new double[this->rows];
+        for (int i = 0; i < b->getSize(); i++) {
+            double *row = new double[this->cols];
+            for (auto temp = 0; temp < this->cols; temp++) {
+                row[temp] = (*this->data[temp])[i];
+            }
+            int temp = 0;
+            for (int j = 0; j < this->cols; j++) {
+                double r = row[j];
+                double c = (*b)[j];
+                temp += c * r;
+            }
+            pDouble[i] = temp;
+        }
+        return new Vector(this->rows, pDouble);
+    }
+
+    Vector *operator[](int i) const {
+        return new Vector(this->data[i]);
+    }
+
+    Matrix *updatePlus(int index, Vector *v) {
+        Vector **pVector = new Vector *[this->cols];
+        for (int i = 0; i < this->cols; i++) {
+            if (i == index) {
+                pVector[i] = *this->data[i] + v;
+            } else {
+                pVector[i] = new Vector(this->data[i]);
+            }
+        }
+        return new Matrix(this->rows, this->cols, pVector);
+    }
+
+
+    ~Matrix() {
+        for (int i = 0; i < this->rows; i++) {
+            //delete this->data[i];
+        }
+        //delete[]this->data;
+    }
+
+    friend std::ostream &operator<<(std::ostream &out, const Matrix *m) {
+        Matrix a(m);
+        for (int i = 0; i < a.rows; i++) {
+            out << " | ";
+            for (int j = 0; j < a.cols; j++) {
+                Vector *t = a[j];
+                out << (*t)[i] << " | ";
+            }
+            out << "\n";
+        }
+        return out;
+    }
+
+    unsigned int getRows() const {
+        return rows;
+    }
+
+    unsigned int getCols() const {
+        return cols;
+    }
+
+
+};
+
+
+#endif //NN_MATRIX_H
Index: Vector.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Vector.h b/Vector.h
new file mode 100644
--- /dev/null	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
+++ b/Vector.h	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
@@ -0,0 +1,177 @@
+//
+// Created by Tomer on 12/08/2022.
+//
+
+#ifndef NN_VECTOR_H
+#define NN_VECTOR_H
+
+
+#include <ostream>
+
+class Vector {
+    unsigned int size;
+    double *data;
+    bool trans;
+public:
+    Vector() {
+        this->size = 0;
+        this->data = nullptr;
+        this->trans = false;
+    }
+
+    bool isTrans() const {
+        return trans;
+    }
+
+    Vector(unsigned int size) {
+        this->size = size;
+        this->data = new double[size]{0};
+        this->trans = false;
+    }
+
+    Vector(unsigned int size, double *data) {
+        this->size = size;
+        this->data = data;
+        this->trans = false;
+    }
+
+    Vector(unsigned int size, double *data, bool trans) {
+        this->size = size;
+        this->data = data;
+        this->trans = trans;
+    }
+
+    Vector(const Vector *pVector) {
+        this->size = pVector->size;
+        this->data = new double[this->size];
+        this->trans = pVector->trans;
+        for (int i = 0; i < this->size; i++) {
+            this->data[i] = (*pVector)[i];
+        }
+    }
+
+    Vector(const Vector *pVector, bool trans) {
+        this->size = pVector->size;
+        this->data = new double[this->size];
+        this->trans = trans;
+        for (int i = 0; i < this->size; i++) {
+            this->data[i] = (*pVector)[i];
+        }
+    }
+
+    ~Vector() {
+        //delete[]this->data;
+
+    }
+
+    Vector *transpose() const {
+        return new Vector(this, !this->trans);
+    }
+
+    Vector *operator+(double alpha) const {
+        double *tempData = new double[this->size];
+        for (int i = 0; i < this->size; i++) {
+            double d = this->data[i];
+            tempData[i] = d + alpha;
+        }
+        return new Vector(this->size, tempData);
+    }
+
+    Vector *operator*(double alpha) const {
+        double *tempData = new double[this->size];
+        for (int i = 0; i < this->size; i++) {
+            double d = this->data[i];
+            tempData[i] = d * alpha;
+        }
+        return new Vector(this->size, tempData);
+    }
+
+    Vector *operator+(Vector *b) const {
+        if (this->size != b->size) {
+            return nullptr;
+        }
+        double *tempData = new double[this->size];
+        for (int i = 0; i < this->size; i++) {
+            double a = this->data[i];
+            double bD = b->data[i];
+            tempData[i] = a + bD;
+        }
+        return new Vector(this->size, tempData);
+    }
+
+    Vector *operator+=(double alpha) {
+        for (int i = 0; i < this->size; i++) {
+            this->data[i] += alpha;
+        }
+        return this;
+    }
+
+    Vector *operator*=(double alpha) {
+        for (int i = 0; i < this->size; i++) {
+            this->data[i] *= alpha;
+        }
+        return this;
+    }
+
+    Vector *operator+=(Vector *b) {
+        if (this->size != b->size) {
+            return nullptr;
+        }
+        for (int i = 0; i < this->size; i++) {
+            this->data[i] += b->data[i];
+        }
+        return this;
+    }
+
+    Vector *operator*=(Vector *b) {
+        if (this->size != b->size) {
+            return nullptr;
+        }
+        for (int i = 0; i < this->size; i++) {
+            this->data[i] *= b->data[i];
+        }
+        return this;
+    }
+
+    Vector* updatePlus(int index, double v) {
+        double* pDouble=new double[this->size];
+        for(int i=0;i< this->size;i++){
+            if(i==index){
+                pDouble[i]=this->data[i]+v;
+            }else{
+                pDouble[i]=this->data[i];
+            }
+        }
+        return new Vector(this->size,pDouble);
+    }
+
+    friend std::ostream &operator<<(std::ostream &out, const Vector* v) {
+        Vector a(v);
+        if (a.trans) {
+            out << " | ";
+            for (int i = 0; i < a.size; i++) {
+                out << a.data[i] << " | ";
+            }
+            out << "\n";
+        } else {
+            for (int i = 0; i < a.size; i++) {
+                out << " | " << a.data[i] << " | " << "\n";
+            }
+        }
+        return out;
+    }
+
+    double operator[](int i) const {
+        double t = this->data[i];
+        return t;
+    }
+
+
+    unsigned int getSize() const {
+        return size;
+    }
+
+};
+
+
+#endif //NN_VECTOR_H
Index: data.txt
===================================================================
diff --git a/data.txt b/data.txt
new file mode 100644
--- /dev/null	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
+++ b/data.txt	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
@@ -0,0 +1,240 @@
+-93.6,-7.2,0.055999999999999994,102.2,1.8,0?
+-94.9,-6.1,0.015,100.2,5.5,2?
+-95.6,-7.6,0.013999999999999999,100.2,9.0,2?
+-94.6,-6.6,0.015,100.4,2.4,2?
+-95.4,-6.8,0.013999999999999999,100.2,1.3,2?
+-93.8,-7.0,0.05,101.7,3.4,1?
+-93.5,-7.7,0.046,101.5,9.6,1?
+-93.1,-6.9,0.049,102.1,7.0,0?
+-94.9,-6.6,0.015,100.2,7.5,2?
+-93.5,-7.8,0.05,101.5,3.6,0?
+-94.9,-6.2,0.019,100.4,3.3,2?
+-94.4,-7.3,0.042,101.3,8.1,1?
+-95.0,-6.4,0.013999999999999999,100.2,2.2,2?
+-95.1,-6.4,0.015,100.1,3.7,2?
+-92.9,-7.0,0.044000000000000004,101.4,2.3,1?
+-94.3,-5.6,0.02,100.4,3.5,2?
+-94.4,-7.5,0.039,101.1,9.5,1?
+-93.6,-7.1,0.043,101.3,8.4,1?
+-95.2,-7.0,0.013999999999999999,100.1,1.8,2?
+-95.3,-6.8,0.016,100.2,8.9,2?
+-93.4,-7.1,0.046,101.3,1.8,1?
+-94.8,-6.6,0.013999999999999999,100.2,2.0,2?
+-93.9,-7.4,0.055999999999999994,101.4,4.1,0?
+-93.7,-7.2,0.051,101.5,7.3,0?
+-95.0,-7.2,0.033,101.0,7.5,1?
+-93.7,-7.5,0.05,101.4,3.8,0?
+-93.5,-7.8,0.04,101.0,5.6,1?
+-94.3,-7.2,0.040999999999999995,101.3,3.6,1?
+-95.1,-6.9,0.015,100.1,6.1,2?
+-95.7,-6.6,0.019,100.2,2.5,2?
+-94.7,-5.8,0.015,100.2,3.1,2?
+-95.1,-7.5,0.045,101.7,8.6,0?
+-92.4,-7.0,0.066,102.1,8.0,0?
+-93.1,-7.2,0.055999999999999994,102.2,8.3,0?
+-94.4,-7.2,0.049,102.0,6.3,0?
+-94.1,-7.0,0.051,101.8,1.3,0?
+-93.0,-6.8,0.047,101.4,1.7,1?
+-94.9,-6.2,0.015,99.8,3.5,2?
+-94.4,-7.1,0.031,101.3,8.5,1?
+-94.3,-7.0,0.042,101.2,0.9,1?
+-94.8,-7.3,0.039,101.4,0.4,1?
+-94.9,-6.3,0.015,99.9,2.5,2?
+-93.3,-7.0,0.05,101.7,8.1,1?
+-95.0,-7.0,0.016,99.7,9.3,2?
+-94.6,-6.1,0.013000000000000001,100.4,0.0,2?
+-94.6,-7.0,0.013999999999999999,100.2,8.0,2?
+-93.6,-7.4,0.055,101.8,6.6,0?
+-93.3,-6.6,0.054000000000000006,102.3,8.8,0?
+-94.3,-7.1,0.042,101.3,3.6,1?
+-95.0,-6.5,0.016,100.6,3.2,2?
+-94.9,-6.2,0.015,100.3,1.2,2?
+-93.9,-7.2,0.04,101.3,8.6,1?
+-94.2,-7.2,0.051,102.4,7.6,0?
+-93.8,-7.1,0.048,101.3,4.1,1?
+-93.9,-7.1,0.047,100.9,0.2,1?
+-95.4,-6.2,0.019,100.4,5.4,2?
+-94.3,-6.2,0.017,100.3,6.3,2?
+-94.9,-7.5,0.025,101.1,8.2,1?
+-93.3,-7.8,0.045,101.5,9.5,1?
+-93.9,-7.0,0.044000000000000004,101.8,6.4,0?
+-94.2,-7.3,0.039,101.2,6.3,1?
+-92.9,-7.0,0.059000000000000004,101.6,7.6,0?
+-95.3,-6.8,0.013000000000000001,99.7,6.1,2?
+-93.5,-7.0,0.048,101.8,1.6,0?
+-95.2,-6.9,0.016,100.2,0.3,2?
+-93.3,-7.0,0.057,102.3,6.3,0?
+-92.6,-7.2,0.061,101.9,4.6,0?
+-93.1,-6.8,0.057,102.3,2.6,0?
+-95.9,-6.9,0.015,100.2,1.3,2?
+-92.3,-7.4,0.069,102.3,4.5,0?
+-95.4,-6.6,0.013999999999999999,100.3,8.8,2?
+-95.0,-8.0,0.035,101.0,8.5,1?
+-94.0,-6.6,0.045,101.6,2.2,1?
+-94.1,-6.8,0.048,101.8,9.5,1?
+-94.8,-7.3,0.044000000000000004,101.4,0.4,1?
+-93.7,-7.1,0.061,101.8,1.9,0?
+-93.7,-6.7,0.055,102.5,4.4,0?
+-93.8,-7.2,0.048,101.8,7.5,0?
+-94.5,-5.8,0.013999999999999999,100.2,5.4,2?
+-95.0,-8.0,0.035,100.5,4.2,1?
+-94.0,-7.3,0.051,101.6,3.5,1?
+-94.6,-6.6,0.015,99.9,7.1,2?
+-93.7,-7.2,0.046,101.5,8.5,0?
+-94.6,-6.1,0.012,100.4,8.9,2?
+-94.8,-6.6,0.013999999999999999,99.7,7.9,2?
+-94.6,-7.0,0.045,101.5,6.1,1?
+-93.3,-7.5,0.057999999999999996,101.8,3.6,0?
+-93.5,-7.5,0.057999999999999996,102.2,7.3,0?
+-94.7,-6.9,0.016,100.2,4.3,2?
+-95.0,-6.6,0.016,100.4,7.8,2?
+-95.0,-6.4,0.013999999999999999,100.7,0.0,2?
+-94.0,-6.1,0.045,101.6,5.2,1?
+-93.7,-6.7,0.06,102.5,3.6,0?
+-92.1,-6.2,0.064,102.0,3.5,0?
+-93.6,-7.6,0.043,101.3,2.2,1?
+-94.7,-6.3,0.015,100.2,1.1,2?
+-94.3,-7.2,0.036000000000000004,101.3,5.9,1?
+-94.6,-7.6,0.033,101.0,2.7,1?
+-93.2,-6.8,0.059000000000000004,102.3,2.1,0?
+-94.5,-6.5,0.008,100.2,0.2,2?
+-95.6,-6.9,0.015,100.1,6.9,2?
+-93.7,-6.6,0.055999999999999994,102.4,5.4,0?
+-92.7,-6.6,0.063,101.8,4.9,0?
+-94.9,-6.5,0.013999999999999999,100.2,9.4,2?
+-94.0,-7.1,0.045,101.5,9.4,1?
+-93.2,-7.2,0.053,101.4,8.6,1?
+-95.0,-6.7,0.013999999999999999,100.2,9.6,2?
+-92.8,-6.4,0.061,102.5,7.7,0?
+-94.4,-7.5,0.044000000000000004,101.1,9.3,1?
+-93.6,-7.2,0.055999999999999994,102.1,5.2,0?
+-93.9,-7.4,0.055999999999999994,100.9,0.6,0?
+-93.7,-6.6,0.051,102.4,6.1,0?
+-94.3,-7.4,0.035,101.0,3.7,1?
+-94.5,-7.6,0.038,101.1,2.2,1?
+-94.9,-6.3,0.015,100.4,0.3,2?
+-94.6,-6.3,0.015,100.2,7.2,2?
+-94.9,-7.5,0.03,101.1,0.6,1?
+-93.8,-7.8,0.045,101.5,0.7,1?
+-93.3,-6.9,0.042,101.5,6.0,1?
+-94.9,-6.2,0.016,100.2,9.0,2?
+-93.3,-6.9,0.055999999999999994,102.4,6.2,0?
+-94.5,-7.5,0.04,101.8,3.8,1?
+-93.5,-7.0,0.055,101.8,2.8,0?
+-94.0,-7.8,0.05,101.5,1.4,0?
+-92.8,-7.0,0.061,102.3,7.2,0?
+-92.3,-6.7,0.067,102.2,0.6,0?
+-95.6,-7.0,0.008,100.2,8.0,2?
+-94.2,-7.3,0.051,102.4,9.0,0?
+-93.1,-6.9,0.049,101.5,8.5,1?
+-92.3,-7.4,0.07400000000000001,102.3,3.0,0?
+-93.3,-6.7,0.057,103.0,3.2,0?
+-95.0,-6.5,0.013000000000000001,100.3,0.1,2?
+-95.0,-7.0,0.016,100.6,7.7,2?
+-93.7,-7.5,0.05,101.9,6.3,0?
+-94.9,-6.5,0.013999999999999999,100.3,9.5,2?
+-93.5,-7.0,0.057999999999999996,102.2,5.4,0?
+-94.1,-7.0,0.055999999999999994,101.8,5.0,0?
+-94.8,-7.2,0.045,101.3,0.1,1?
+-94.2,-7.9,0.04,101.2,8.0,1?
+-92.8,-7.5,0.057999999999999996,101.6,9.1,0?
+-94.7,-7.0,0.013999999999999999,100.1,1.2,2?
+-94.4,-6.8,0.042,101.3,7.3,1?
+-96.2,-7.0,0.011000000000000001,100.1,1.0,2?
+-93.0,-6.8,0.052000000000000005,101.4,0.6,1?
+-95.1,-7.0,0.013999999999999999,100.2,9.6,2?
+-95.0,-7.0,0.016,100.2,2.0,2?
+-93.9,-7.1,0.047,101.4,0.9,1?
+-95.2,-6.6,0.019,100.2,9.8,2?
+-95.0,-6.2,0.013999999999999999,100.2,6.5,2?
+-94.8,-5.9,0.015,100.1,0.5,2?
+-95.0,-6.6,0.015,100.2,7.7,2?
+-93.5,-7.2,0.046,101.5,8.6,1?
+-95.2,-6.6,0.016,100.7,7.2,2?
+-92.7,-7.1,0.063,101.8,5.0,0?
+-93.6,-7.2,0.055999999999999994,101.6,0.6,0?
+-94.8,-6.4,0.015,100.1,0.4,2?
+-93.6,-6.8,0.05,101.5,9.4,1?
+-93.9,-6.7,0.04,101.3,2.3,1?
+-94.9,-6.7,0.017,100.5,6.0,2?
+-93.1,-6.9,0.051,102.3,9.6,0?
+-94.3,-7.5,0.05,102.0,6.9,0?
+-94.8,-7.0,0.042,101.2,7.4,1?
+-92.8,-7.2,0.067,102.0,8.5,0?
+-94.5,-7.6,0.037000000000000005,101.0,5.5,1?
+-92.6,-7.2,0.066,101.9,9.9,0?
+-95.0,-7.7,0.033,101.0,1.1,1?
+-95.5,-7.7,0.013000000000000001,100.8,2.0,2?
+-92.8,-7.0,0.057999999999999996,101.6,6.6,0?
+-93.6,-7.8,0.053,101.9,4.9,0?
+-94.2,-7.3,0.051,101.9,4.5,0?
+-93.3,-6.9,0.055999999999999994,101.9,0.3,0?
+-94.0,-7.8,0.04,101.0,4.4,1?
+-95.2,-6.5,0.013999999999999999,100.3,3.5,2?
+-94.4,-7.0,0.040999999999999995,101.3,9.9,1?
+-94.3,-6.7,0.017,100.3,5.8,2?
+-94.6,-6.1,0.017,100.2,7.6,2?
+-92.3,-6.4,0.061,102.5,3.7,0?
+-94.0,-7.6,0.045,101.5,3.8,1?
+-93.7,-6.7,0.047,101.6,0.5,1?
+-93.8,-6.6,0.054000000000000006,102.3,7.3,0?
+-94.1,-7.0,0.042,102.0,3.3,1?
+-93.9,-7.2,0.047,101.2,8.9,1?
+-94.2,-7.2,0.051,102.9,7.3,0?
+-94.5,-8.1,0.037000000000000005,101.0,1.9,1?
+-93.6,-6.8,0.045,101.5,0.1,1?
+-93.3,-6.7,0.057,102.5,1.7,0?
+-92.8,-6.8,0.06,101.8,8.8,0?
+-93.1,-6.9,0.051,101.8,3.8,0?
+-95.1,-6.9,0.015,100.1,1.0,2?
+-94.4,-7.5,0.045,101.5,8.5,1?
+-95.6,-7.0,0.013000000000000001,100.2,7.3,2?
+-93.2,-7.0,0.055,102.1,9.2,0?
+-94.8,-7.4,0.035,101.0,0.8,1?
+-93.4,-7.0,0.044000000000000004,101.4,1.0,1?
+-94.0,-7.0,0.048,101.8,8.9,0?
+-94.9,-7.0,0.040999999999999995,101.3,7.8,1?
+-94.0,-6.8,0.051,102.0,3.4,0?
+-92.1,-6.2,0.064,102.5,8.0,0?
+-92.4,-7.0,0.066,102.6,5.5,0?
+-95.2,-7.0,0.013999999999999999,100.3,5.2,2?
+-95.1,-7.4,0.015,100.1,4.7,2?
+-93.3,-7.0,0.052000000000000005,102.3,9.1,0?
+-93.6,-6.8,0.053,101.8,2.6,0?
+-94.5,-7.4,0.044000000000000004,101.2,1.6,1?
+-94.2,-7.3,0.039,101.7,7.0,1?
+-94.9,-7.0,0.013999999999999999,100.2,8.1,2?
+-93.9,-7.0,0.046,101.4,6.0,1?
+-94.2,-6.7,0.047,101.6,5.1,1?
+-95.0,-7.6,0.038,101.1,0.9,1?
+-92.8,-7.3,0.06,101.8,6.5,0?
+-93.6,-7.3,0.053,101.9,4.0,0?
+-93.6,-6.8,0.048,101.8,4.4,1?
+-93.1,-6.9,0.044000000000000004,101.5,9.8,1?
+-93.7,-7.8,0.049,101.8,8.9,0?
+-93.3,-6.9,0.044000000000000004,101.9,4.0,1?
+-95.4,-6.9,0.015,100.2,3.2,2?
+-93.7,-7.3,0.051,101.9,1.2,0?
+-94.5,-6.8,0.012,100.2,2.3,2?
+-94.2,-7.4,0.04,101.2,0.4,1?
+-95.4,-6.4,0.01,100.7,2.9,2?
+-94.2,-7.3,0.046,101.0,3.5,1?
+-93.7,-7.7,0.044000000000000004,101.3,4.6,1?
+-95.0,-6.8,0.012,100.2,0.8,2?
+-95.5,-6.6,0.015,100.2,2.8,2?
+-93.7,-7.5,0.049,101.5,5.4,1?
+-92.9,-7.0,0.059000000000000004,102.1,0.3,0?
+-94.0,-7.0,0.055,101.8,2.7,0?
+-95.0,-6.5,0.013000000000000001,99.8,0.4,2?
+-94.2,-7.3,0.051,101.9,1.3,0?
+-94.9,-6.2,0.011000000000000001,100.2,3.3,2?
+-93.1,-6.8,0.052000000000000005,102.3,0.6,0?
+-95.6,-7.1,0.013999999999999999,100.2,4.7,2?
+-93.7,-7.0,0.055,102.1,9.2,0?
+-95.4,-6.4,0.01,100.2,7.6,2?
+-95.2,-6.6,0.016,100.2,9.0,2?
+-93.6,-6.9,0.055,101.8,9.4,0?
+-92.3,-6.2,0.067,102.2,5.1,0?
+-95.6,-6.8,0.013000000000000001,100.7,3.4,2?
+-93.3,-6.7,0.057,102.6,9.8,0?
+-93.7,-7.2,0.044000000000000004,101.3,2.0,1?
Index: main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.cpp b/main.cpp
new file mode 100644
--- /dev/null	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
+++ b/main.cpp	(revision 9d458047d8ffad96c3430d0e16a55800ede01a93)
@@ -0,0 +1,81 @@
+#include <iostream>
+#include <fstream>
+#include <iomanip>
+#include "Matrix.h"
+#include "LiniarAlgebra.h"
+#include "vector"
+#include "ML.h"
+struct data_point {
+    Vector *x;
+    int y;
+
+    data_point(Vector *v, int r) {
+        x = v;
+        y = r;
+    }
+    data_point(data_point* d) {
+        x = new Vector(d->x);
+        y = d->y;
+    }
+};
+using namespace std;
+
+
+
+double *fromVectorToArray(vector<double> v) {
+    double *pInt = new double[v.size()];
+    for (int i = 0; i < v.size(); i++) {
+        pInt[i] = v[i];
+    }
+    return pInt;
+}
+
+vector<data_point*> *get_data(std::string file_path) {
+    std::ifstream file(file_path);
+    std::string line;
+    auto *data = new vector<data_point*>;
+    while (getline(file, line)) {
+        vector<double> x;
+        int y;
+        string temp;
+        for (char c : line) {
+            switch (c) {
+                case (','):
+                    x.push_back(stod(temp));
+                    temp = "";
+                    break;
+                case ('?'):
+                    y = stod(temp);
+                    temp = "";
+                    break;
+                default:
+                    temp += c;
+                    break;
+            }
+        }
+        auto *v = new Vector(x.size(), fromVectorToArray(x));
+        auto dataPoint = new data_point(v, y);
+        data->push_back(dataPoint);
+    }
+    file.close();
+    return data;
+}
+
+int main() {
+    clock_t start = clock();
+    vector<data_point*>* data = get_data("data.txt");
+    srand(time(NULL));
+    Perceptron p(3,5);
+    int train=192;
+    cout<<"Start Train"<<endl;
+    p.train(new vector<data_point*>(data->begin(),data->begin()+train));
+    cout<<"Finished Train"<<endl;
+    double r=p.test(new vector<data_point*>(data->begin()+train+1,data->end()));
+    cout<<r<<endl;
+    clock_t end = clock();
+    double time_taken = double(end - start) / double(CLOCKS_PER_SEC);
+    cout << "Time taken by program is : " << fixed
+    << time_taken << setprecision(5);
+    cout << " sec " << endl;
+    return 0;
+}
